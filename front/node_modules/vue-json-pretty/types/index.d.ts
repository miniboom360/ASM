import { Plugin } from 'vue';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            data: import("./utils").JSONDataType;
            path: string;
            showLength: boolean;
            showDoubleQuotes: boolean;
            showSelectController: boolean;
            showLine: boolean;
            selectOnClickNode: boolean;
            collapsedOnClickBrackets: boolean;
            pathSelectable: (path: string, content: string) => boolean;
            highlightSelectedNode: boolean;
            deep: number;
            deepCollapseChildren: boolean;
            collapsePath: RegExp;
            virtual: boolean;
            virtualLines: number;
            itemHeight: number;
            modelValue: string | string[];
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            data: {
                type: import("vue").PropType<import("./utils").JSONDataType>;
                default: null;
            };
            deep: {
                type: NumberConstructor;
                default: number;
            };
            deepCollapseChildren: {
                type: BooleanConstructor;
                default: boolean;
            };
            collapsePath: {
                type: RegExpConstructor;
                default: null;
            };
            path: {
                type: StringConstructor;
                default: string;
            };
            virtual: {
                type: BooleanConstructor;
                default: boolean;
            };
            virtualLines: {
                type: NumberConstructor;
                default: number;
            };
            itemHeight: {
                type: NumberConstructor;
                default: number;
            };
            modelValue: {
                type: import("vue").PropType<string | string[]>;
                default: () => string;
            };
            showLength: {
                type: BooleanConstructor;
                default: boolean;
            };
            showDoubleQuotes: {
                type: BooleanConstructor;
                default: boolean;
            };
            customValueFormatter: import("vue").PropType<(data: string, key: string | undefined, path: string, defaultFormatResult: string) => unknown>;
            selectableType: import("vue").PropType<"" | "multiple" | "single">;
            showSelectController: {
                type: BooleanConstructor;
                default: boolean;
            };
            showLine: {
                type: BooleanConstructor;
                default: boolean;
            };
            selectOnClickNode: {
                type: BooleanConstructor;
                default: boolean;
            };
            collapsedOnClickBrackets: {
                type: BooleanConstructor;
                default: boolean;
            };
            pathSelectable: {
                type: import("vue").PropType<(path: string, content: string) => boolean>;
                default: () => boolean;
            };
            highlightSelectedNode: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "data" | "path" | "showLength" | "showDoubleQuotes" | "showSelectController" | "showLine" | "selectOnClickNode" | "collapsedOnClickBrackets" | "pathSelectable" | "highlightSelectedNode" | "deep" | "deepCollapseChildren" | "collapsePath" | "virtual" | "virtualLines" | "itemHeight" | "modelValue">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "update:modelValue" | "click", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            data: {
                type: import("vue").PropType<import("./utils").JSONDataType>;
                default: null;
            };
            deep: {
                type: NumberConstructor;
                default: number;
            };
            deepCollapseChildren: {
                type: BooleanConstructor;
                default: boolean;
            };
            collapsePath: {
                type: RegExpConstructor;
                default: null;
            };
            path: {
                type: StringConstructor;
                default: string;
            };
            virtual: {
                type: BooleanConstructor;
                default: boolean;
            };
            virtualLines: {
                type: NumberConstructor;
                default: number;
            };
            itemHeight: {
                type: NumberConstructor;
                default: number;
            };
            modelValue: {
                type: import("vue").PropType<string | string[]>;
                default: () => string;
            };
            showLength: {
                type: BooleanConstructor;
                default: boolean;
            };
            showDoubleQuotes: {
                type: BooleanConstructor;
                default: boolean;
            };
            customValueFormatter: import("vue").PropType<(data: string, key: string | undefined, path: string, defaultFormatResult: string) => unknown>;
            selectableType: import("vue").PropType<"" | "multiple" | "single">;
            showSelectController: {
                type: BooleanConstructor;
                default: boolean;
            };
            showLine: {
                type: BooleanConstructor;
                default: boolean;
            };
            selectOnClickNode: {
                type: BooleanConstructor;
                default: boolean;
            };
            collapsedOnClickBrackets: {
                type: BooleanConstructor;
                default: boolean;
            };
            pathSelectable: {
                type: import("vue").PropType<(path: string, content: string) => boolean>;
                default: () => boolean;
            };
            highlightSelectedNode: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, {
            tree: import("vue").Ref<HTMLElement | undefined>;
            state: {
                translateY: number;
                visibleData: {
                    id: number;
                    content: string;
                    level: number;
                    path: string;
                    key?: string | undefined;
                    index?: number | undefined;
                    showComma: boolean;
                    length: number;
                    type: "content" | "objectStart" | "objectEnd" | "objectCollapsed" | "arrayStart" | "arrayEnd" | "arrayCollapsed";
                }[] | null;
                hiddenPaths: {
                    [x: string]: 1;
                };
            };
            flatData: import("vue").ComputedRef<import("./components/TreeNode").NodeDataType[]>;
            selectedPaths: import("vue").ComputedRef<(string | string[])[]>;
            onTreeScroll: () => void;
            onSelectedChange: ({ path }: import("./components/TreeNode").NodeDataType) => void;
            onTreeNodeClick: ({ content, path }: import("./components/TreeNode").NodeDataType) => void;
            onBracketsClick: (collapsed: boolean, path: string) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "click")[], string, {
            data: import("./utils").JSONDataType;
            path: string;
            showLength: boolean;
            showDoubleQuotes: boolean;
            showSelectController: boolean;
            showLine: boolean;
            selectOnClickNode: boolean;
            collapsedOnClickBrackets: boolean;
            pathSelectable: (path: string, content: string) => boolean;
            highlightSelectedNode: boolean;
            deep: number;
            deepCollapseChildren: boolean;
            collapsePath: RegExp;
            virtual: boolean;
            virtualLines: number;
            itemHeight: number;
            modelValue: string | string[];
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        data: {
            type: import("vue").PropType<import("./utils").JSONDataType>;
            default: null;
        };
        deep: {
            type: NumberConstructor;
            default: number;
        };
        deepCollapseChildren: {
            type: BooleanConstructor;
            default: boolean;
        };
        collapsePath: {
            type: RegExpConstructor;
            default: null;
        };
        path: {
            type: StringConstructor;
            default: string;
        };
        virtual: {
            type: BooleanConstructor;
            default: boolean;
        };
        virtualLines: {
            type: NumberConstructor;
            default: number;
        };
        itemHeight: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: import("vue").PropType<string | string[]>;
            default: () => string;
        };
        showLength: {
            type: BooleanConstructor;
            default: boolean;
        };
        showDoubleQuotes: {
            type: BooleanConstructor;
            default: boolean;
        };
        customValueFormatter: import("vue").PropType<(data: string, key: string | undefined, path: string, defaultFormatResult: string) => unknown>;
        selectableType: import("vue").PropType<"" | "multiple" | "single">;
        showSelectController: {
            type: BooleanConstructor;
            default: boolean;
        };
        showLine: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectOnClickNode: {
            type: BooleanConstructor;
            default: boolean;
        };
        collapsedOnClickBrackets: {
            type: BooleanConstructor;
            default: boolean;
        };
        pathSelectable: {
            type: import("vue").PropType<(path: string, content: string) => boolean>;
            default: () => boolean;
        };
        highlightSelectedNode: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        tree: import("vue").Ref<HTMLElement | undefined>;
        state: {
            translateY: number;
            visibleData: {
                id: number;
                content: string;
                level: number;
                path: string;
                key?: string | undefined;
                index?: number | undefined;
                showComma: boolean;
                length: number;
                type: "content" | "objectStart" | "objectEnd" | "objectCollapsed" | "arrayStart" | "arrayEnd" | "arrayCollapsed";
            }[] | null;
            hiddenPaths: {
                [x: string]: 1;
            };
        };
        flatData: import("vue").ComputedRef<import("./components/TreeNode").NodeDataType[]>;
        selectedPaths: import("vue").ComputedRef<(string | string[])[]>;
        onTreeScroll: () => void;
        onSelectedChange: ({ path }: import("./components/TreeNode").NodeDataType) => void;
        onTreeNodeClick: ({ content, path }: import("./components/TreeNode").NodeDataType) => void;
        onBracketsClick: (collapsed: boolean, path: string) => void;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: import("vue").PropType<import("./utils").JSONDataType>;
        default: null;
    };
    deep: {
        type: NumberConstructor;
        default: number;
    };
    deepCollapseChildren: {
        type: BooleanConstructor;
        default: boolean;
    };
    collapsePath: {
        type: RegExpConstructor;
        default: null;
    };
    path: {
        type: StringConstructor;
        default: string;
    };
    virtual: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualLines: {
        type: NumberConstructor;
        default: number;
    };
    itemHeight: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: import("vue").PropType<string | string[]>;
        default: () => string;
    };
    showLength: {
        type: BooleanConstructor;
        default: boolean;
    };
    showDoubleQuotes: {
        type: BooleanConstructor;
        default: boolean;
    };
    customValueFormatter: import("vue").PropType<(data: string, key: string | undefined, path: string, defaultFormatResult: string) => unknown>;
    selectableType: import("vue").PropType<"" | "multiple" | "single">;
    showSelectController: {
        type: BooleanConstructor;
        default: boolean;
    };
    showLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectOnClickNode: {
        type: BooleanConstructor;
        default: boolean;
    };
    collapsedOnClickBrackets: {
        type: BooleanConstructor;
        default: boolean;
    };
    pathSelectable: {
        type: import("vue").PropType<(path: string, content: string) => boolean>;
        default: () => boolean;
    };
    highlightSelectedNode: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    tree: import("vue").Ref<HTMLElement | undefined>;
    state: {
        translateY: number;
        visibleData: {
            id: number;
            content: string;
            level: number;
            path: string;
            key?: string | undefined;
            index?: number | undefined;
            showComma: boolean;
            length: number;
            type: "content" | "objectStart" | "objectEnd" | "objectCollapsed" | "arrayStart" | "arrayEnd" | "arrayCollapsed";
        }[] | null;
        hiddenPaths: {
            [x: string]: 1;
        };
    };
    flatData: import("vue").ComputedRef<import("./components/TreeNode").NodeDataType[]>;
    selectedPaths: import("vue").ComputedRef<(string | string[])[]>;
    onTreeScroll: () => void;
    onSelectedChange: ({ path }: import("./components/TreeNode").NodeDataType) => void;
    onTreeNodeClick: ({ content, path }: import("./components/TreeNode").NodeDataType) => void;
    onBracketsClick: (collapsed: boolean, path: string) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "click")[], "change" | "update:modelValue" | "click", {
    data: import("./utils").JSONDataType;
    path: string;
    showLength: boolean;
    showDoubleQuotes: boolean;
    showSelectController: boolean;
    showLine: boolean;
    selectOnClickNode: boolean;
    collapsedOnClickBrackets: boolean;
    pathSelectable: (path: string, content: string) => boolean;
    highlightSelectedNode: boolean;
    deep: number;
    deepCollapseChildren: boolean;
    collapsePath: RegExp;
    virtual: boolean;
    virtualLines: number;
    itemHeight: number;
    modelValue: string | string[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin;
export default _default;
